# https://redmine.lighttpd.net/projects/1/wiki/TutorialConfiguration

### ShaarliGo begin
# needs server.modules += ( "mod_setenv" )
var.shaarli_go_path_0 = "^/<url path to, but excluding shaarligo.cgi>/"         # change as needed, keep leading and trailing slash
$HTTP["url"] =~ shaarli_go_path_0 {
  cgi.assign = ( "shaarligo.cgi" => "" ) # execute without interpreter

  url.redirect = (
    # start with ? to make the trailing slash of shaarli_go_path_0 optional:
    shaarli_go_path_0 + "?$" => "=/p/",
    shaarli_go_path_0 + "pub/posts/?$" => "../../=/p/",                         # keep until fall
    shaarli_go_path_0 + "pub/posts/([0-9a-zA-Z_-]{6}/)$" => "../../../=/p/$1",  # keep until fall
    shaarli_go_path_0 + "?(\?([0-9a-zA-Z_-]{6}))$" => "=/p/$2/",
    shaarli_go_path_0 + "?(\?(.+&)?post=.+)$" => "shaarligo.cgi$1", # redirect legacy shaarli posting
    shaarli_go_path_0 + "p:([0-9a-zA-Z_-]{6})$" => "=/p/$1/",
    shaarli_go_path_0 + "t:(.+)$" => "=/t/$1/",
  )

  # when serving .xml.gz: index-file.names = ( "index.xml.gz" )
  index-file.names = ( "index.xml" )

  setenv.add-response-header += (
    # nice
    "X-Powered-By" => "http://purl.mro.name/ShaarliGo#v0.0.4",
    # recommended
    # http://www.golem.de/news/content-security-policy-schutz-vor-cross-site-scripting-1306-99795.html
    # http://www.w3.org/TR/CSP/#example-policies
    "Content-Security-Policy" => "default-src 'none'; style-src 'self' 'unsafe-inline'; script-src 'self' 'sha256-hGqewLn4csF93PEX/0TCk2jdnAytXBZFxFBzKt7wcgo='; connect-src 'self'; font-src 'self'; img-src *; media-src *;",
    # "Access-Control-Allow-Origin" => "*",
  )

  mimetype.assign = (
    ".css"  => "text/css; charset=utf-8",
    ".js"   => "text/javascript; charset=utf-8",
    ".json" => "application/json",
    ".png"  => "image/png",
    ".svg"  => "image/svg+xml",
    ".txt"  => "text/plain; charset=utf-8",
    ".xml"  => "text/xml; charset=utf-8",
    ".xslt" => "text/xsl; charset=utf-8", # a Chromism. https://stackoverflow.com/a/21604288
  )

  compress.filetype = (
    "application/json",
    "application/xslt+xml",
    "text/css; charset=utf-8",
    "text/html; charset=utf-8",
    "image/svg+xml",
    "text/javascript; charset=utf-8",
    "text/plain; charset=utf-8",
    "text/xml; charset=utf-8",
    "text/xsl; charset=utf-8",
  )

  # caching
  $HTTP["url"] =~ "^/assets/" { setenv.add-response-header += ( "Cache-Control" => "max-age=604800, public" ) } # 7 days
  $HTTP["url"] !~ "^/assets/" { setenv.add-response-header += ( "Cache-Control" => "no-cache" ) }

  # todo: match /$ when serving .xml.gz:
  $HTTP["url"] =~ "(\.xml\.gz)$" {
    # serve compressed content to be unpacked by client
    setenv.add-response-header  += (
      "Content-Encoding" => "gzip",
      "Content-Type" => "text/xml; charset=utf-8",
    )
    compress.filetype = ( )
  }
}
$HTTP["url"] =~ shaarli_go_path_0 + "app/" { url.access-deny = ("") }
#### ShaarliGo end

# handle http -> https redirects
$HTTP["scheme"] != "https" {
  $HTTP["url"] !~ "^/\.well-known/" {
#    url.redirect = ("^.*$" => "https://<your hostname example.com>$0"),
  }
}

